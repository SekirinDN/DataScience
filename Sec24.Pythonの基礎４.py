# Pythonの基礎4
# Pythonの特殊なメソッドを解説します
# これらを活用することで、より短くて読みやすいコードを記述することが可能になります

# ・__init__ メソッド
#  ・__init__は特殊なメソッドで、イニシャライザ、もしくはコンストラクタと呼ばれています。
#  ・このメソッドでは、インスタンスの生成時にインスタンスの初期設定を行うことができます。
#  ・以下のクラスでは、__init__メソッドでインスタンス変数aの初期設定を行っています。
print("-" * 50)
class Calc:  # Calcクラス
    def __init__(self, a):  # __init__メソッド
        self.a = a
    def add(self, b):  # addメソッド
        print(self.a + b)
    def multiply(self, b):  # multiplyメソッド
        print(self.a * b)
#  ・以下では、インスタンスの生成時に、3という値をインスタンスに渡しています。
#  ・この保持された値は、後で計算に利用することができます。
cl = Calc(3)  # インスタンスclを生成
cl.add(4)  # 3 + 4
cl.multiply(4) # 3 × 4
cl.multiply(6) # 3 × 6
#  ・このように、__init__メソッドを使えば、
#    インスタンスの生成時にインスタンスに値を渡すことができます。
#  ・そのため、何度も繰り返して使用したり、複数のメソッドで使う値があれば、
#    __init__メソッドで設定するのが効率的になります。


# ・__call__メソッド
#  ・__call__メソッドは、インスタンス名を使って呼び出すことができます。
#  ・以下では、Calcクラスに__init__メソッドの他に__call__メソッドを実装しています。
print("-" * 50)
class Calc:  # Calcクラス
    def __init__(self, a):  # __init__メソッド
        self.a = a
    def __call__(self, c):  # __call__メソッド
        print(self.a * c + c)
    def add(self, b):  # addメソッド
        print(self.a + b)
    def multiply(self, b):  # multiplyメソッド
        print(self.a * b)
#  ・以下では、インスタンスの名clを使って__call__メソッドを呼び出しています。
cl = Calc(3)  # インスタンスclを生成

# インスタンス名clを使って__call__メソッドを呼ぶ
cl(5)  # 3 × 5 + 5
#  ・このように、__call__メソッドを使えばメソッド名を記述する必要が無くなります。
#  ・頻繁に用いる処理を__call__メソッドに記述しておくことで、
#    コードの記述量が少なくて済むようになります。
