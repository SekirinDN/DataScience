# 確率の基礎

# ・確率とは？
#  ・確率は世界を「起こりやすさ」として捉えます。
#  ・現実世界の現象を表現するために、とても有用な概念です。
#  ・「確率」（Probability）とは、はある現象が起きることが期待される度合いのことです。
#  ・確率は以下の式で表されます。
#     P(A) = a/n
#  ・この式において、 P(A) は事象 A が起きる確率、
#    a は事象Aが起きる場合の数、 n は全ての場合の数です。

# ・コインを投げを例として考えましょう。
#    コインを投げて落ちたときに上になる面は
#    表と裏の2通りです。どちらの面が上になるのも、同じ程度に期待されるとします。
#  ・このとき、場合の数は2です。
#  ・そして、表の面が出るという事象 A の場合の数は1です。
#  ・従って、確率は以下の通りになります。
#     P(A) = a/n = 1/2
#  ・1/2 なので、表が上になるという事象は50%期待されることになります。

# ・次にサイコロの例を考えます。
#   サイコロで3が出るという事象Aが起きる確率は、
#   事象Aの場合の数が1で、全ての場合の数が6なので、以下の通りになります。
#     P(A) = a/n = 1/6
#  ・1/6 なので、約16.7%期待されることになります。

# ・次に、2つのサイコロを振って、目の合計が4になる確率を求めます。
#  ・目の合計が4になるという事象Aは、(1, 3)、(2, 2)、（3, 1）の3つあります。
#  ・場合の数は、全部で6×6=36通りです。
#  ・この場合の確率は、以下の通りにです。
#     P(A) = a/n = 3/36 = 1/12
#  ・1/12 なので約8.3%です。
#    2つのサイコロを振って合計が4になるのは、8.3%程度期待できることになります。


# ・余事象
#  ・事象  A  に対して「 A が起こらないという事象」を A の「余事象」といいます。
#    A の余事象は、 A¯ などと表します。
#  ・余事象 A¯ が起きる確率ですが、事象 A が起きる確率 P(A) を使って、
#    以下のように求めることができます。
#     P(A¯)=1−P(A)
#  ・先程の例では、2つのサイコロを振って目の合計が4になる確率は 112 でした。
#  ・これを使って、「2つのサイコロを振って目の合計が4以外になる確率」を、
#    以下の通りに求めることができます。
#     P(A¯) = 1 − 1/12 = 11/12
#  ・約91.7%の確率で、目の合計は4以外になることになります。
#  ・目の合計が4以外になる全ての場合を挙げるのには手間がかかりますが、
#    余事象を使うことで確率は簡単に求めることができます。


# ・乱数とは？
#  ・例えばサイコロを投げる場合、上の面が決まるまで1-6のどれが出るのか分かりません。
#  ・「乱数」とは、このような未確定の数値です。
#  ・以下のコードは、NumPyのrandom.randint( )を使って、サイコロのように1-6の値を
#    ランダムに返すコードです。
#  ・randint()関数に整数 n を引数として渡すと、 0 から n−1 までの整数の乱数を返します。
import numpy as np
r_int = np.random.randint(6) + 1  # 0から5までの乱数に、1を加える
print(r_int)  # 1から6までがランダムに表示される
#  ・NumPyのrandom.rand()関数を使うと、0から1までの間の
#    小数をランダムに取得することができます。
import numpy as np
r_dec = np.random.rand()   # 0から1の間の小数を、ランダムに返す
print(r_dec)


# ・均一な乱数
#  ・先述のrandom.rand()関数は、0から1の間の小数を均等な確率で返します。
#  ・この関数に整数aを引数として渡すと、そのような小数をa個得ることができます。
#  ・以下のコードは、多数の均一な乱数をx座標、y座標として、散布図にプロットします。
#  ・実行することで、random.rand()により得られる乱数が均一であることが確認できます。
import numpy as np
import matplotlib.pyplot as plt
n = 1000  # サンプル数
x = np.random.rand(n)  # 0-1の均一な乱数
y = np.random.rand(n)  # 0-1の均一な乱数
plt.scatter(x, y)  # 散布図のプロット
plt.grid()
plt.show()


# ・偏った乱数
#  ・NumPyのrandom.randn( )関数は、後のレクチャーで解説する
#   「正規分布」という分布に従う確率で乱数を返します。
#  ・正規分布では、中央で確率が高く、両端で確率が低くなります。
#  ・以下のコードは、正規分布に従う多数の乱数をx座標、y座標として散布図にプロットします。
import numpy as np
import matplotlib.pyplot as plt
n = 1000  # サンプル数
x = np.random.randn(n)  # 正規分布に従う乱数
y = np.random.randn(n)  # 正規分布に従う乱数
plt.scatter(x, y)  # 散布図のプロット
plt.grid()
plt.show()


# ・確率への収束
#  ・(事象の発生数/試行数)はやがて確率に収束していきます。
#  ・以下のコードは、サイコロを何度も振って5が出た回数を数え、
#    (5が出た回数/振った回数)の推移を表示するコードです。
#  ・試行を重ねるにつれて、(5が出た回数/試行数)が確率（約16.7%）に
#    収束していくことを確認しましょう。
import numpy as np
import matplotlib.pyplot as plt
x = []
y = []
total = 0  # 試行数
num_5 = 0  # 5が出た回数
n = 10000  # サイコロを振る回数
for i in range(n):
    if np.random.randint(6) + 1 == 5:  # 0-5までのランダムな数に1を加えて1-6に
        num_5 += 1
    total += 1
    x.append(i)
    y.append(num_5 / total)
plt.plot(x, y)
plt.plot(x, [1 / 6] * n, linestyle="dashed")  # yは1/6がn個入ったリスト
plt.grid()
plt.show()
